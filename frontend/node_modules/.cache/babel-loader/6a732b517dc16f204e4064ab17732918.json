{"ast":null,"code":"var _jsxFileName = \"/app/src/sites/LoginFormSite.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport VisibilityOutlinedIcon from '@material-ui/icons/VisibilityOutlined';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport IconButton from '@material-ui/core/IconButton';\nimport CheckIfSessionCookieExists from \"../components/CheckIfSessionCookieExists\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  form: {\n    display: \"inline-block\",\n    marginTop: theme.spacing(3),\n    marginLeft: \"40%\"\n  }\n}));\nexport default function LoginFormSite() {\n  _s();\n\n  const classes = useStyles();\n  const [username, changeUsername] = useState(\"\");\n  const [email, changeEmail] = useState(\"\");\n  const [password, changePassword] = useState(\"\");\n  const [passwordVisibility, changePasswordVisibility] = useState(false);\n  const checkLogin = CheckIfSessionCookieExists();\n  const history = useHistory();\n\n  const onChange = e => {\n    e.preventDefault();\n    console.log(e);\n\n    switch (e.target.id) {\n      case \"username\":\n        changeUsername(e.target.value);\n        break;\n\n      case \"email\":\n        changeEmail(e.target.value);\n        break;\n\n      case \"password\":\n        changePassword(e.target.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  function onSubmit(e) {\n    e.preventDefault();\n    console.log(e);\n    const passswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/;\n\n    if (email === \"\") {\n      console.log(\"empty email\");\n    } else if (password === \"\" || password.match(passswordRegex)) {\n      console.log(\"empty or poor password\");\n    } else if (username === \"\") {\n      console.log(\"empty username\");\n    } //TODO ADD DATA TRANSITION TO BACKEND\n\n  }\n\n  const setPasswordVisible = () => {\n    changePasswordVisibility(true);\n  };\n\n  const setPasswordInvisible = () => {\n    changePasswordVisibility(false);\n  };\n\n  if (!checkLogin) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        children: \"Login Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Welcome, have a nice time :)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        noValidate: true,\n        autoComplete: \"off\",\n        method: \"post\",\n        onSubmit: onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          className: classes.form,\n          type: \"text\",\n          id: \"username\",\n          label: \"Username\",\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          className: classes.form,\n          type: \"email\",\n          id: \"email\",\n          label: \"E-mail\",\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          className: classes.form,\n          type: passwordVisibility === true ? \"text\" : \"password\",\n          id: \"password\",\n          label: \"Password\",\n          visible: passwordVisibility,\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: passwordVisibility === true ? setPasswordInvisible : setPasswordVisible,\n          children: passwordVisibility === true ? /*#__PURE__*/_jsxDEV(VisibilityOffOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 50\n          }, this) : /*#__PURE__*/_jsxDEV(VisibilityOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 81\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"secondary\",\n          type: \"submit\",\n          className: classes.form //TODO ADD HCAPTCHA\n          ,\n          children: \"Log In!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: history.push(\"/\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(LoginFormSite, \"H+YdO1M5V2IcbWtZV3RMHrwhD34=\", false, function () {\n  return [useStyles, useHistory];\n});\n\n_c = LoginFormSite;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginFormSite\");","map":{"version":3,"sources":["/app/src/sites/LoginFormSite.js"],"names":["React","makeStyles","useState","TextField","Button","Typography","VisibilityOutlinedIcon","VisibilityOffOutlinedIcon","IconButton","CheckIfSessionCookieExists","useHistory","useStyles","theme","root","form","display","marginTop","spacing","marginLeft","LoginFormSite","classes","username","changeUsername","email","changeEmail","password","changePassword","passwordVisibility","changePasswordVisibility","checkLogin","history","onChange","e","preventDefault","console","log","target","id","value","onSubmit","passswordRegex","match","setPasswordVisible","setPasswordInvisible","push"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport {makeStyles} from \"@material-ui/core\"\nimport {useState} from \"react\"\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography'\nimport VisibilityOutlinedIcon from '@material-ui/icons/VisibilityOutlined';\nimport VisibilityOffOutlinedIcon from '@material-ui/icons/VisibilityOffOutlined';\nimport IconButton from '@material-ui/core/IconButton'\nimport CheckIfSessionCookieExists from \"../components/CheckIfSessionCookieExists\"\nimport {useHistory} from \"react-router-dom\"\n\nconst useStyles = makeStyles((theme)=>({\n    root:{\n            \n    },\n    form:{\n        display: \"inline-block\",\n        marginTop: theme.spacing(3),\n        marginLeft: \"40%\", \n    },\n\n}))\n\nexport default function LoginFormSite(){\n    const classes = useStyles();\n    const [username, changeUsername] = useState(\"\")\n    const [email, changeEmail] = useState(\"\")\n    const [password, changePassword] = useState(\"\")\n    const [passwordVisibility, changePasswordVisibility] = useState(false)\n    const checkLogin = CheckIfSessionCookieExists();\n    const history = useHistory();\n    const onChange = (e) =>{\n        e.preventDefault();\n        console.log(e)\n        switch(e.target.id){\n            case \"username\":\n                changeUsername(e.target.value);\n                break\n            case \"email\":\n                changeEmail(e.target.value);\n                break\n            case \"password\":\n                changePassword(e.target.value);\n                break\n            default: \n                break\n        }\n    }\n    function onSubmit(e){\n        e.preventDefault()\n        console.log(e)\n        const passswordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/\n        if (email === \"\"){\n            console.log(\"empty email\")\n        }else if(password === \"\" || password.match(passswordRegex)){\n            console.log(\"empty or poor password\")\n        }else if(username === \"\"){\n            console.log(\"empty username\")\n        }\n\n        //TODO ADD DATA TRANSITION TO BACKEND\n    }\n    const setPasswordVisible = () =>{\n        changePasswordVisibility(true)\n    }\n    const setPasswordInvisible = () =>{\n        changePasswordVisibility(false)\n    }\n    if(!checkLogin){\n    return(\n        <div className={classes.root}>\n            <Typography variant=\"h2\">\n                Login Page\n            </Typography>\n            <Typography variant=\"h6\">\n                Welcome, have a nice time :)\n            </Typography>\n            <form noValidate autoComplete=\"off\" method=\"post\" onSubmit={onSubmit}>\n                <TextField className={classes.form} type=\"text\" id=\"username\" label=\"Username\" onChange={onChange}/>\n                <TextField className={classes.form} type=\"email\" id=\"email\" label=\"E-mail\" onChange={onChange}/>\n                <TextField className={classes.form} type={passwordVisibility === true? \"text\" : \"password\"} id=\"password\" label=\"Password\" visible={passwordVisibility} onChange={onChange}/>\n                <IconButton  onClick={passwordVisibility===true ? setPasswordInvisible: setPasswordVisible}>\n                    {passwordVisibility===true ? <VisibilityOffOutlinedIcon/> : <VisibilityOutlinedIcon/>}\n                </IconButton>\n                <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                type=\"submit\"\n                className={classes.form}\n                //TODO ADD HCAPTCHA\n                >Log In!</Button>\n            </form>\n        </div>\n    )\n    }else{\n        return(\n        <div>\n            {history.push(\"/\")}\n        </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}