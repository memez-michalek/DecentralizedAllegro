{"ast":null,"code":"var _jsxFileName = \"/app/src/components/BalanceComponent.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport Typography from '@material-ui/core/Typography';\nimport Web3 from \"web3\";\nimport Payments from \"../build/contracts/Payments.json\";\nimport red from \"@material-ui/core/colors/red\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BalanceComponent() {\n  _s();\n\n  const [balance, changeBalance] = useState(0);\n  const [address, changeAddress] = useState(\"\");\n  const [balanceInsideContract, changeInsideBalance] = useState(\"\");\n  useEffect(() => {\n    async function getAccounts(ethereum) {\n      changeAddress(await ethereum.request({\n        method: 'eth_accounts'\n      }));\n    }\n\n    async function getBalance(ethereum) {\n      let web3 = new Web3();\n      const usersBalance = await ethereum.request({\n        method: 'eth_getBalance',\n        params: [address[0], \"latest\"]\n      });\n      const intBalance = parseInt(usersBalance, 16);\n      const balance = web3.utils.fromWei(String(intBalance), \"ether\");\n      return balance;\n    }\n\n    async function getCurrentProviderAndBalance() {\n      try {\n        if (typeof window.ethereum !== \"undefined\") {\n          console.log(\"connected\");\n        } else {\n          alert(\"error occurred\");\n        }\n\n        await getAccounts(window.ethereum);\n        changeBalance(await getBalance(window.ethereum));\n      } catch (e) {\n        console.error(e + \"error occurred\");\n      }\n    }\n\n    async function getBalanceInsideContract() {\n      let web3 = new Web3();\n      const contract = web3.eth.Contract(Payments.abi, \"\", {\n        from: address,\n        gasLimit: \"600000\",\n        gasPrice: \"20000000000\"\n      });\n      await contract.methods.getCurrentBalance().send({\n        from: address\n      }).then(function (receipt) {\n        changeBalanceInsideContract(receipt.events.currentBalance.returnValues.amount);\n      }, function (callback, err) {\n        console.error(err);\n      });\n    }\n\n    getBalanceInsideContract();\n    getCurrentProviderAndBalance();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"p\",\n      children: [\"Balance inside metamsk \", balance, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"p\",\n      color: red,\n      children: [\"Balance inside smart contract \", balance, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BalanceComponent, \"b4W3RXrJrGcvpYhwOeYCxaPBntw=\");\n\n_c = BalanceComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"BalanceComponent\");","map":{"version":3,"sources":["/app/src/components/BalanceComponent.js"],"names":["React","useEffect","useState","Typography","Web3","Payments","red","BalanceComponent","balance","changeBalance","address","changeAddress","balanceInsideContract","changeInsideBalance","getAccounts","ethereum","request","method","getBalance","web3","usersBalance","params","intBalance","parseInt","utils","fromWei","String","getCurrentProviderAndBalance","window","console","log","alert","e","error","getBalanceInsideContract","contract","eth","Contract","abi","from","gasLimit","gasPrice","methods","getCurrentBalance","send","then","receipt","changeBalanceInsideContract","events","currentBalance","returnValues","amount","callback","err"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {useEffect, useState} from \"react\"\nimport Typography from '@material-ui/core/Typography'\nimport Web3 from \"web3\";\nimport Payments from \"../build/contracts/Payments.json\"\nimport red from \"@material-ui/core/colors/red\"\n\nexport default function BalanceComponent(){\n    const[balance, changeBalance] = useState(0);\n    const[address, changeAddress] = useState(\"\");\n    const[balanceInsideContract, changeInsideBalance] = useState(\"\");\n    \n    useEffect(() => {\n        async function getAccounts(ethereum){\n            changeAddress(await ethereum.request({method: 'eth_accounts'}))\n        }\n        async function getBalance(ethereum){\n            let web3 = new Web3()\n            const usersBalance = await ethereum.request({method: 'eth_getBalance', params: [address[0], \"latest\"]})\n            const intBalance =  parseInt(usersBalance,16)\n            const balance = web3.utils.fromWei(String(intBalance), \"ether\")\n            return balance;\n        }\n        async function getCurrentProviderAndBalance(){\n        try{\n            if(typeof window.ethereum !== \"undefined\"){\n                console.log(\"connected\")\n                \n            }else{\n                alert(\"error occurred\")\n            }\n            await getAccounts(window.ethereum)\n            changeBalance(await getBalance(window.ethereum))\n            \n        }catch(e){\n            console.error(e + \"error occurred\")\n        }\n    }\n    async function getBalanceInsideContract(){\n        let web3 = new Web3()\n        const contract = web3.eth.Contract(Payments.abi, \"\",{\n            from: address,\n            gasLimit: \"600000\",\n            gasPrice: \"20000000000\"\n        })\n        await contract.methods.getCurrentBalance().send({from: address }).then(function(receipt){\n            changeBalanceInsideContract(receipt.events.currentBalance.returnValues.amount)\n        }, function(callback, err){\n            console.error(err)\n        })\n    }\n\n    getBalanceInsideContract()\n    getCurrentProviderAndBalance()\n    }, [])\n\n    return(\n        <div>\n            <Typography\n            variant=\"p\"\n            >Balance inside metamsk {balance} ETH</Typography>\n            <Typography\n            variant=\"p\"\n            color={red}\n            >Balance inside smart contract {balance} ETH</Typography>\n\n        </div>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}